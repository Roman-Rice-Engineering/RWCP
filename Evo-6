//For Displaying Data
#include "Adafruit_LEDBackpack.h"   //Include library for controlling seven seg display
Adafruit_7segment sevenSeg = Adafruit_7segment();   //Run constructor for seven segment display control library

//For Recieving Data
#define DATA 4    //Define the digital pin to which the clock line of RWCP is connected
#define CLOCK 2  //Define the digital pin to which the data line of RWCP is connected

//Data Storage Variables
#define BUFFERSIZE 63   //Size of buffer, number of bytes - 1

byte lastReceivedByte;  //The last recieved byte of data will be stored here
byte receiveBuffer[BUFFERSIZE + 1]; //Up to 64 of the last recieved bytes will be stored here

uint8_t numBitsRead = 0;      //How many bits have been written to lastReadByte since data was last moved to buffer, set 0 as default
uint8_t currentBufferPos = 0; //Where in the buffer are we, set 0 as default

//Data Reading Variables
bool dataValue;       //Current data value
bool clockEdge;      //Is used to differentiate rising and falling edges of a clock pulse, 1 is rising edge, 0 is falling edge

bool transmissionState = false;  //True if a transmission is in progress, set to 0 by default

//For Sending Data
#define BUTTON 7  //Define the digital pin to which the send message button is connected
#define DIAL 0    //Define the analog pin to which the message selection dial is connected

//=====================//
uint32_t writeDelay = 100;  //How many milliseconds to wait between each digital write while sending a message
//====================//

byte byteToSend;   //This is the variable that will be sent

//Code to Send Data
void SendStartSignal() {
  digitalWrite(CLOCK, 1);
  delay(writeDelay);
  digitalWrite(DATA, 1);
  delay(writeDelay);
  digitalWrite(CLOCK, 0);
  delay(writeDelay);
  digitalWrite(DATA, 0);
}

void SendDataBit(bool dataBit) {
  digitalWrite(CLOCK, 0);
  delay(writeDelay);
  digitalWrite(DATA, dataBit);
  delay(writeDelay);
  digitalWrite(CLOCK, 1);
  delay(writeDelay);
  digitalWrite(DATA, 0);
}

void SendEndSignal() {
  digitalWrite(DATA, 1);
  delay(writeDelay);
  digitalWrite(CLOCK, 0);
  delay(writeDelay);
  digitalWrite(DATA, 0);
}

void SendByte(byte dataByte) {
  pinMode(DATA, OUTPUT);
  pinMode(CLOCK, OUTPUT);
  SendStartSignal();
  delay(writeDelay);
  for (int8_t i = 7; i >= 0; i--) {
    SendDataBit(bitRead(dataByte, i));
    delay(writeDelay);
  }
  SendEndSignal();
  pinMode(DATA, INPUT);
  pinMode(CLOCK, INPUT);
}

//Code to Receive Data
void SetData() {
  dataValue = digitalRead(DATA);

  if (digitalRead(CLOCK) == 0) {
    clockEdge = 0;
  } else {
    clockEdge = 1;
  }

  //Change transmission state on start/stop signal
  //Detecting a high data value during falling edge of clock pulse
  if (clockEdge == 0) {
    if (dataValue == 1) {
      transmissionState = !transmissionState;
    }
  }
}

void ReadDataValue() {
  lastReceivedByte = (lastReceivedByte << 1);
  if (dataValue == 1) {
    bitSet(lastReceivedByte, 0);
  } else {
    bitClear(lastReceivedByte, 0);
  }
  if (numBitsRead == 7) {
    numBitsRead = 0;
    receiveBuffer[currentBufferPos] = lastReceivedByte;
    if (currentBufferPos < BUFFERSIZE) {
      currentBufferPos++;
    } else {
      currentBufferPos = 0;
    }
  } else {
    numBitsRead++;
  }
}

void MasterReceiveFunction() {
  SetData();
  if (transmissionState == true) {
    if (clockEdge == 1) {
      ReadDataValue();
    }
  }
}

void setup() {
  pinMode(DATA, INPUT);
  attachInterrupt(digitalPinToInterrupt(CLOCK), MasterReceiveFunction , CHANGE);
  pinMode(BUTTON, INPUT_PULLUP);
  sevenSeg.begin(0x70);   //Begin communicating to seven seg display brekout board at its default address
}

void loop() {
  if (currentBufferPos != 0) {
    sevenSeg.print(receiveBuffer[currentBufferPos - 1], DEC);
  } else {
    sevenSeg.print(receiveBuffer[BUFFERSIZE], DEC);
  }
  sevenSeg.writeDisplay();
  byteToSend = round(analogRead(DIAL) / 4);
  if (digitalRead(BUTTON) == LOW) {
    SendByte(byteToSend);
  }
}
